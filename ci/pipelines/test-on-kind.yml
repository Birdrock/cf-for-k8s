---
resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

resources:
- name: cf-for-k8s-develop
  type: git
  icon: github-box
  source:
    branch: wip-kind-on-gcp-test-ci
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    ignore_paths:
      - ci/**

- name: cf-for-k8s-develop-ci
  type: git
  icon: github-box
  source:
    branch: wip-kind-on-gcp-test-ci
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
      - ci/**

- name: terraform
  type: terraform
  source:
    backend_type: gcs
    backend_config:
      bucket: relint-k8s-cluster-state
      prefix: kind
      credentials: ((dev_cluster_pool_gcs_admin_service_account_json))

- name: cf-for-k8s-kind-gcp-terraform-templates
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-for-k8s
    branch: develop
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
    - deploy/kind-on-gcp/terraform/**

# Extract common platform and image_resource details so task configs can be more concise
x-config: &common-task-config
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: relintdockerhubpushbot/cf-for-k8s-ci

jobs:
- name: validate-cf-for-k8s
  plan:
  - in_parallel:
    - get: cf-for-k8s-develop
    - get: cf-for-k8s-develop-ci
    - get: cf-for-k8s-kind-gcp-terraform-templates

  - task: create-tf-vars-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: relintdockerhubpushbot/cf-deployment-concourse-tasks}
      outputs:
      - name: tf-vars
      params:
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          env_suffix=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
          echo "ci-test-cluster-${env_suffix}" > tf-vars/env-name.txt
          cat <<EOT > tf-vars/input.tfvars
          project = "${GCP_PROJECT_NAME}"
          region = "us-central1"
          zone = "us-central1-a"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          machine_type = "n1-standard-8"
          EOT

  - put: terraform
    params:
      terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

  - do:
    - task: create-kind-cluster
      attempts: 5
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
        cf-for-k8s-ci: cf-for-k8s-develop-ci
      file: cf-for-k8s-develop-ci/ci/tasks/create-kind-cluster/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        VERSION_SELECTOR: oldest_version
    - task: install-cf
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
        cf-for-k8s-ci: cf-for-k8s-develop-ci
      file: cf-for-k8s-develop-ci/ci/tasks/install-cf-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
    - task: ensure-api-healthy
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
        cf-for-k8s-ci: cf-for-k8s-develop-ci
      file: cf-for-k8s-develop-ci/ci/tasks/ensure-api-healthy-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
    - task: run-smoke-tests
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
        cf-for-k8s-ci: cf-for-k8s-develop-ci
      file: cf-for-k8s-develop-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
    ensure:
      put: terraform
      params:
        terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files: [tf-vars/input.tfvars]
      get_params:
        action: destroy

- name: validate-cf-for-k8s-newest
  plan:
  - in_parallel:
    - get: cf-for-k8s-develop
    - get: cf-for-k8s-develop-ci
    - get: cf-for-k8s-kind-gcp-terraform-templates

  - task: create-tf-vars-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: relintdockerhubpushbot/cf-deployment-concourse-tasks}
      outputs:
      - name: tf-vars
      params:
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          env_suffix=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
          echo "ci-test-cluster-${env_suffix}" > tf-vars/env-name.txt
          cat <<EOT > tf-vars/input.tfvars
          project = "${GCP_PROJECT_NAME}"
          region = "us-central1"
          zone = "us-central1-a"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          machine_type = "n1-standard-8"
          EOT

  - put: terraform
    params:
      terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

  - do:
    - task: create-kind-cluster
      attempts: 5
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
        cf-for-k8s-ci: cf-for-k8s-develop-ci
      file: cf-for-k8s-develop-ci/ci/tasks/create-kind-cluster/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        VERSION_SELECTOR: newest_version
    - task: install-cf
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
        cf-for-k8s-ci: cf-for-k8s-develop-ci
      file: cf-for-k8s-develop-ci/ci/tasks/install-cf-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
    - task: ensure-api-healthy
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
        cf-for-k8s-ci: cf-for-k8s-develop-ci
      file: cf-for-k8s-develop-ci/ci/tasks/ensure-api-healthy-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
    - task: run-smoke-tests
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
        cf-for-k8s-ci: cf-for-k8s-develop-ci
      file: cf-for-k8s-develop-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
    ensure:
      put: terraform
      params:
        terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files: [tf-vars/input.tfvars]
      get_params:
        action: destroy
