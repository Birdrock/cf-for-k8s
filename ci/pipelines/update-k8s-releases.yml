---
groups:
- name: all
  jobs:
  - cf-k8s-logging-run-unit-tests
  - cf-k8s-logging-validate-on-newest-k8s-version
  - cf-k8s-logging-validate-on-oldest-k8s-version
  - cf-k8s-logging-validate-upgrade
  - cf-k8s-logging-push-to-develop
  - kpack-run-unit-tests
  - kpack-validate-on-newest-k8s-version
  - kpack-validate-on-oldest-k8s-version
  - kpack-validate-upgrade
  - kpack-push-to-develop
  - uaa-run-unit-tests
  - uaa-validate-on-newest-k8s-version
  - uaa-validate-on-oldest-k8s-version
  - uaa-validate-upgrade
  - uaa-push-to-develop
  - eirini-run-unit-tests
  - eirini-validate-on-newest-k8s-version
  - eirini-validate-on-oldest-k8s-version
  - eirini-validate-upgrade
  - eirini-push-to-develop
- name: cf-k8s-logging
  jobs:
  - cf-k8s-logging-run-unit-tests
  - cf-k8s-logging-validate-on-newest-k8s-version
  - cf-k8s-logging-validate-on-oldest-k8s-version
  - cf-k8s-logging-validate-upgrade
  - cf-k8s-logging-push-to-develop
- name: kpack
  jobs:
  - kpack-run-unit-tests
  - kpack-validate-on-newest-k8s-version
  - kpack-validate-on-oldest-k8s-version
  - kpack-validate-upgrade
  - kpack-push-to-develop
- name: uaa
  jobs:
  - uaa-run-unit-tests
  - uaa-validate-on-newest-k8s-version
  - uaa-validate-on-oldest-k8s-version
  - uaa-validate-upgrade
  - uaa-push-to-develop
- name: eirini
  jobs:
  - eirini-run-unit-tests
  - eirini-validate-on-newest-k8s-version
  - eirini-validate-on-oldest-k8s-version
  - eirini-validate-upgrade
  - eirini-push-to-develop

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

resources:
- name: cf-for-k8s-develop
  type: git
  icon: github-box
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readwrite_deploy_key.private_key))
    ignore_paths:
      - ci/**

- name: cf-for-k8s-ci
  type: git
  icon: github-box
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
      - ci/**

- name: cf-k8s-logging-release
  type: github-release
  source:
    owner: cloudfoundry
    repository: cf-k8s-logging
    access_token: ((cf_deployment_release_bot_access_token))

- name: kpack-release
  type: github-release
  source:
    owner: pivotal
    repository: kpack
    access_token: ((cf_deployment_release_bot_access_token))
    pre_release: true

- name: uaa-release
  type: github-release
  source:
    owner: cloudfoundry
    repository: uaa
    access_token: ((cf_deployment_release_bot_access_token))

- name: eirini-release
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: eirini-release
    access_token: ((cf_deployment_release_bot_access_token))

- name: terraform
  type: terraform
  source:
    backend_type: gcs
    backend_config:
      bucket: relint-k8s-cluster-state
      credentials: ((dev_cluster_pool_gcs_admin_service_account_json))

- name: ready-pool
  type: pool
  icon: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    pool: k8s-dev/ready
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))

- name: destroy-pool
  type: pool
  icon: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    pool: k8s-dev/destroy
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))

# Extract common platform and image_resource details so task configs can be more concise
x-config: &common-task-config
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: relintdockerhubpushbot/cf-for-k8s-ci

jobs:
- name: cf-k8s-logging-run-unit-tests
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
    - get: cf-k8s-logging-release
      trigger: true

  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
    input_mapping:
      release: cf-k8s-logging-release
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      REPO_NAME: cf-k8s-logging

  - task: run-unit-tests
    file: cf-for-k8s-ci/ci/tasks/run-unit-tests/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-bump

- name: cf-k8s-logging-validate-on-oldest-k8s-version
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
      passed:
      - cf-k8s-logging-run-unit-tests
    - get: cf-k8s-logging-release
      passed:
      - cf-k8s-logging-run-unit-tests
      trigger: true

  #TODO reduce duplication of this bump release task
  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
    input_mapping:
      release: cf-k8s-logging-release
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      REPO_NAME: cf-k8s-logging

  - task: create-tf-vars-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: relintdockerhubpushbot/cf-deployment-concourse-tasks}
      outputs:
      - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          env_suffix=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
          echo "ci-test-cluster-${env_suffix}" > tf-vars/env-name.txt
          cat <<EOT > tf-vars/input.tfvars
          project = "((ci_k8s_gcp_project_name))"
          region = "((ci_k8s_gcp_project_region))"
          zone = "((ci_k8s_gcp_project_zone))"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          machine_type = "n1-standard-8"
          EOT

  - put: terraform
    params:
      terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

  - do:
    - task: create-kind-cluster
      attempts: 5
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      file: cf-for-k8s-ci/ci/tasks/create-kind-cluster/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        VERSION_SELECTOR: oldest_version

    - task: install-cf
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    - task: run-smoke-tests
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    ensure:
      put: terraform
      params:
        terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files: [tf-vars/input.tfvars]
      get_params:
        action: destroy

- name: cf-k8s-logging-validate-on-newest-k8s-version
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
      passed:
      - cf-k8s-logging-run-unit-tests
    - get: cf-k8s-logging-release
      passed:
      - cf-k8s-logging-run-unit-tests
      trigger: true

  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
    input_mapping:
      release: cf-k8s-logging-release
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      REPO_NAME: cf-k8s-logging

  - task: create-tf-vars-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: relintdockerhubpushbot/cf-deployment-concourse-tasks}
      outputs:
      - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          env_suffix=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
          echo "ci-test-cluster-${env_suffix}" > tf-vars/env-name.txt
          cat <<EOT > tf-vars/input.tfvars
          project = "((ci_k8s_gcp_project_name))"
          region = "((ci_k8s_gcp_project_region))"
          zone = "((ci_k8s_gcp_project_zone))"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          machine_type = "n1-standard-8"
          EOT

  - put: terraform
    params:
      terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

  - do:
    - task: create-kind-cluster
      attempts: 5
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      file: cf-for-k8s-ci/ci/tasks/create-kind-cluster/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        VERSION_SELECTOR: newest_version

    - task: install-cf
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    - task: run-smoke-tests
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    ensure:
      put: terraform
      params:
        terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files: [tf-vars/input.tfvars]
      get_params:
        action: destroy

- name: cf-k8s-logging-validate-upgrade
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
      passed:
      - cf-k8s-logging-run-unit-tests
    - get: cf-k8s-logging-release
      passed:
      - cf-k8s-logging-run-unit-tests
      trigger: true
    - put: pool-lock
      resource: ready-pool
      params: {acquire: true}

  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
    input_mapping:
      release: cf-k8s-logging-release
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      REPO_NAME: cf-k8s-logging

  - task: first-install-cf-develop
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop
      pool-lock: pool-lock
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))

  - task: push-test-app
    file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop
    params:
      APP_NAME: my-node-app

  - task: upgrade-cf-with-component-bump
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-bump
      pool-lock: pool-lock
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      UPGRADE: true

  - in_parallel:
    - task: run-smoke-tests
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
    - task: verify-existing-app
      file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      params:
        APP_NAME: my-node-app
        VERIFY_EXISTING_APP: true

  - task: delete-cf
    file: cf-for-k8s-ci/ci/tasks/delete-cf/task.yml
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
    input_mapping:
      pool-lock: pool-lock

  on_success:
    do:
      - put: destroy-pool
        params:
          add: pool-lock

      - put: ready-pool
        params:
          remove: pool-lock

- name: cf-k8s-logging-push-to-develop
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
      passed:
      - cf-k8s-logging-validate-on-oldest-k8s-version
      - cf-k8s-logging-validate-on-newest-k8s-version
      - cf-k8s-logging-validate-upgrade
    - get: cf-k8s-logging-release
      passed:
      - cf-k8s-logging-validate-on-oldest-k8s-version
      - cf-k8s-logging-validate-on-newest-k8s-version
      - cf-k8s-logging-validate-upgrade
      trigger: true

  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
    input_mapping:
      release: cf-k8s-logging-release
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      REPO_NAME: cf-k8s-logging

  - put: cf-for-k8s-develop
    params:
      repository: cf-for-k8s-bump
      rebase: true

- name: kpack-run-unit-tests
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
    - get: kpack-release
      trigger: true

  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
    input_mapping:
      release: kpack-release
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      REPO_NAME: kpack

  - task: run-unit-tests
    file: cf-for-k8s-ci/ci/tasks/run-unit-tests/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-bump

- name: kpack-validate-on-oldest-k8s-version
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
      passed:
      - kpack-run-unit-tests
    - get: kpack-release
      passed:
      - kpack-run-unit-tests
      trigger: true

  #TODO reduce duplication of this bump release task
  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
    input_mapping:
      release: kpack-release
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      REPO_NAME: kpack

  - task: create-tf-vars-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: relintdockerhubpushbot/cf-deployment-concourse-tasks}
      outputs:
      - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          env_suffix=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
          echo "ci-test-cluster-${env_suffix}" > tf-vars/env-name.txt
          cat <<EOT > tf-vars/input.tfvars
          project = "((ci_k8s_gcp_project_name))"
          region = "((ci_k8s_gcp_project_region))"
          zone = "((ci_k8s_gcp_project_zone))"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          machine_type = "n1-standard-8"
          EOT

  - put: terraform
    params:
      terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

  - do:
    - task: create-kind-cluster
      attempts: 5
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      file: cf-for-k8s-ci/ci/tasks/create-kind-cluster/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        VERSION_SELECTOR: oldest_version

    - task: install-cf
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    - task: run-smoke-tests
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    ensure:
      put: terraform
      params:
        terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files: [tf-vars/input.tfvars]
      get_params:
        action: destroy

- name: kpack-validate-on-newest-k8s-version
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
      passed:
      - kpack-run-unit-tests
    - get: kpack-release
      passed:
      - kpack-run-unit-tests
      trigger: true

  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
    input_mapping:
      release: kpack-release
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      REPO_NAME: kpack

  - task: create-tf-vars-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: relintdockerhubpushbot/cf-deployment-concourse-tasks}
      outputs:
      - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          env_suffix=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
          echo "ci-test-cluster-${env_suffix}" > tf-vars/env-name.txt
          cat <<EOT > tf-vars/input.tfvars
          project = "((ci_k8s_gcp_project_name))"
          region = "((ci_k8s_gcp_project_region))"
          zone = "((ci_k8s_gcp_project_zone))"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          machine_type = "n1-standard-8"
          EOT

  - put: terraform
    params:
      terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

  - do:
    - task: create-kind-cluster
      attempts: 5
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      file: cf-for-k8s-ci/ci/tasks/create-kind-cluster/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        VERSION_SELECTOR: newest_version

    - task: install-cf
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    - task: run-smoke-tests
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    ensure:
      put: terraform
      params:
        terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files: [tf-vars/input.tfvars]
      get_params:
        action: destroy

- name: kpack-validate-upgrade
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
      passed:
      - kpack-run-unit-tests
    - get: kpack-release
      passed:
      - kpack-run-unit-tests
      trigger: true
    - put: pool-lock
      resource: ready-pool
      params: {acquire: true}

  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
    input_mapping:
      release: kpack-release
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      REPO_NAME: kpack

  - task: first-install-cf-develop
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop
      pool-lock: pool-lock
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))

  - task: push-test-app
    file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop
    params:
      APP_NAME: my-node-app

  - task: upgrade-cf-with-component-bump
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-bump
      pool-lock: pool-lock
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      UPGRADE: true

  - in_parallel:
    - task: run-smoke-tests
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
    - task: verify-existing-app
      file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      params:
        APP_NAME: my-node-app
        VERIFY_EXISTING_APP: true

  - task: delete-cf
    file: cf-for-k8s-ci/ci/tasks/delete-cf/task.yml
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
    input_mapping:
      pool-lock: pool-lock

  on_success:
    do:
      - put: destroy-pool
        params:
          add: pool-lock

      - put: ready-pool
        params:
          remove: pool-lock

- name: kpack-push-to-develop
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
      passed:
      - kpack-validate-on-oldest-k8s-version
      - kpack-validate-on-newest-k8s-version
      - kpack-validate-upgrade
    - get: kpack-release
      passed:
      - kpack-validate-on-oldest-k8s-version
      - kpack-validate-on-newest-k8s-version
      - kpack-validate-upgrade
      trigger: true

  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
    input_mapping:
      release: kpack-release
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      REPO_NAME: kpack

  - put: cf-for-k8s-develop
    params:
      repository: cf-for-k8s-bump
      rebase: true

- name: uaa-run-unit-tests
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
    - get: uaa-release
      trigger: true

  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
    input_mapping:
      release: uaa-release
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      REPO_NAME: uaa

  - task: run-unit-tests
    file: cf-for-k8s-ci/ci/tasks/run-unit-tests/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-bump

- name: uaa-validate-on-oldest-k8s-version
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
      passed:
      - uaa-run-unit-tests
    - get: uaa-release
      passed:
      - uaa-run-unit-tests
      trigger: true

  #TODO reduce duplication of this bump release task
  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
    input_mapping:
      release: uaa-release
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      REPO_NAME: uaa

  - task: create-tf-vars-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: relintdockerhubpushbot/cf-deployment-concourse-tasks}
      outputs:
      - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          env_suffix=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
          echo "ci-test-cluster-${env_suffix}" > tf-vars/env-name.txt
          cat <<EOT > tf-vars/input.tfvars
          project = "((ci_k8s_gcp_project_name))"
          region = "((ci_k8s_gcp_project_region))"
          zone = "((ci_k8s_gcp_project_zone))"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          machine_type = "n1-standard-8"
          EOT

  - put: terraform
    params:
      terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

  - do:
    - task: create-kind-cluster
      attempts: 5
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      file: cf-for-k8s-ci/ci/tasks/create-kind-cluster/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        VERSION_SELECTOR: oldest_version

    - task: install-cf
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    - task: run-smoke-tests
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    ensure:
      put: terraform
      params:
        terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files: [tf-vars/input.tfvars]
      get_params:
        action: destroy

- name: uaa-validate-on-newest-k8s-version
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
      passed:
      - uaa-run-unit-tests
    - get: uaa-release
      passed:
      - uaa-run-unit-tests
      trigger: true

  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
    input_mapping:
      release: uaa-release
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      REPO_NAME: uaa

  - task: create-tf-vars-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: relintdockerhubpushbot/cf-deployment-concourse-tasks}
      outputs:
      - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          env_suffix=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
          echo "ci-test-cluster-${env_suffix}" > tf-vars/env-name.txt
          cat <<EOT > tf-vars/input.tfvars
          project = "((ci_k8s_gcp_project_name))"
          region = "((ci_k8s_gcp_project_region))"
          zone = "((ci_k8s_gcp_project_zone))"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          machine_type = "n1-standard-8"
          EOT

  - put: terraform
    params:
      terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

  - do:
    - task: create-kind-cluster
      attempts: 5
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      file: cf-for-k8s-ci/ci/tasks/create-kind-cluster/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        VERSION_SELECTOR: newest_version

    - task: install-cf
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    - task: run-smoke-tests
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    ensure:
      put: terraform
      params:
        terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files: [tf-vars/input.tfvars]
      get_params:
        action: destroy

- name: uaa-validate-upgrade
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
      passed:
      - uaa-run-unit-tests
    - get: uaa-release
      passed:
      - uaa-run-unit-tests
      trigger: true
    - put: pool-lock
      resource: ready-pool
      params: {acquire: true}

  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
    input_mapping:
      release: uaa-release
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      REPO_NAME: uaa

  - task: first-install-cf-develop
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop
      pool-lock: pool-lock
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))

  - task: push-test-app
    file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop
    params:
      APP_NAME: my-node-app

  - task: upgrade-cf-with-component-bump
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-bump
      pool-lock: pool-lock
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      UPGRADE: true

  - in_parallel:
    - task: run-smoke-tests
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
    - task: verify-existing-app
      file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      params:
        APP_NAME: my-node-app
        VERIFY_EXISTING_APP: true

  - task: delete-cf
    file: cf-for-k8s-ci/ci/tasks/delete-cf/task.yml
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
    input_mapping:
      pool-lock: pool-lock

  on_success:
    do:
      - put: destroy-pool
        params:
          add: pool-lock

      - put: ready-pool
        params:
          remove: pool-lock

- name: uaa-push-to-develop
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
      passed:
      - uaa-validate-on-oldest-k8s-version
      - uaa-validate-on-newest-k8s-version
      - uaa-validate-upgrade
    - get: uaa-release
      passed:
      - uaa-validate-on-oldest-k8s-version
      - uaa-validate-on-newest-k8s-version
      - uaa-validate-upgrade
      trigger: true

  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
    input_mapping:
      release: uaa-release
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      REPO_NAME: uaa

  - put: cf-for-k8s-develop
    params:
      repository: cf-for-k8s-bump
      rebase: true

- name: eirini-run-unit-tests
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
    - get: eirini-release
      trigger: true

  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-eirini/task.yml
    input_mapping:
      release: eirini-release
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))

  - task: run-unit-tests
    file: cf-for-k8s-ci/ci/tasks/run-unit-tests/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-bump

- name: eirini-validate-on-oldest-k8s-version
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
      passed:
      - eirini-run-unit-tests
    - get: eirini-release
      passed:
      - eirini-run-unit-tests
      trigger: true

  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-eirini/task.yml
    input_mapping:
      release: eirini-release
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))

  - task: create-tf-vars-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: relintdockerhubpushbot/cf-deployment-concourse-tasks}
      outputs:
      - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          env_suffix=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
          echo "ci-test-cluster-${env_suffix}" > tf-vars/env-name.txt
          cat <<EOT > tf-vars/input.tfvars
          project = "((ci_k8s_gcp_project_name))"
          region = "((ci_k8s_gcp_project_region))"
          zone = "((ci_k8s_gcp_project_zone))"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          machine_type = "n1-standard-8"
          EOT

  - put: terraform
    params:
      terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

  - do:
    - task: create-kind-cluster
      attempts: 5
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      file: cf-for-k8s-ci/ci/tasks/create-kind-cluster/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        VERSION_SELECTOR: oldest_version

    - task: install-cf
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    - task: run-smoke-tests
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    ensure:
      put: terraform
      params:
        terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files: [tf-vars/input.tfvars]
      get_params:
        action: destroy

- name: eirini-validate-on-newest-k8s-version
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
      passed:
      - eirini-run-unit-tests
    - get: eirini-release
      passed:
      - eirini-run-unit-tests
      trigger: true

  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-eirini/task.yml
    input_mapping:
      release: eirini-release
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))

  - task: create-tf-vars-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: relintdockerhubpushbot/cf-deployment-concourse-tasks}
      outputs:
      - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          env_suffix=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
          echo "ci-test-cluster-${env_suffix}" > tf-vars/env-name.txt
          cat <<EOT > tf-vars/input.tfvars
          project = "((ci_k8s_gcp_project_name))"
          region = "((ci_k8s_gcp_project_region))"
          zone = "((ci_k8s_gcp_project_zone))"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          machine_type = "n1-standard-8"
          EOT

  - put: terraform
    params:
      terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

  - do:
    - task: create-kind-cluster
      attempts: 5
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      file: cf-for-k8s-ci/ci/tasks/create-kind-cluster/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        VERSION_SELECTOR: newest_version

    - task: install-cf
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    - task: run-smoke-tests
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    ensure:
      put: terraform
      params:
        terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files: [tf-vars/input.tfvars]
      get_params:
        action: destroy

- name: eirini-validate-upgrade
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
      passed:
      - eirini-run-unit-tests
    - get: eirini-release
      passed:
      - eirini-run-unit-tests
      trigger: true
    - put: pool-lock
      resource: ready-pool
      params: {acquire: true}

  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-eirini/task.yml
    input_mapping:
      release: eirini-release
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))

  - task: first-install-cf-develop
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop
      pool-lock: pool-lock
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))

  - task: push-test-app
    file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop
    params:
      APP_NAME: my-node-app

  - task: upgrade-cf-with-component-bump
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-bump
      pool-lock: pool-lock
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      UPGRADE: true

  - in_parallel:
    - task: run-smoke-tests
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
    - task: verify-existing-app
      file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      params:
        APP_NAME: my-node-app
        VERIFY_EXISTING_APP: true

  - task: delete-cf
    file: cf-for-k8s-ci/ci/tasks/delete-cf/task.yml
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
    input_mapping:
      pool-lock: pool-lock

  on_success:
    do:
      - put: destroy-pool
        params:
          add: pool-lock

      - put: ready-pool
        params:
          remove: pool-lock

- name: eirini-push-to-develop
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
      passed:
      - eirini-validate-on-oldest-k8s-version
      - eirini-validate-on-newest-k8s-version
      - eirini-validate-upgrade
    - get: eirini-release
      passed:
      - eirini-validate-on-oldest-k8s-version
      - eirini-validate-on-newest-k8s-version
      - eirini-validate-upgrade
      trigger: true

  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-eirini/task.yml
    input_mapping:
      release: eirini-release
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))

  - put: cf-for-k8s-develop
    params:
      repository: cf-for-k8s-bump
      rebase: true
