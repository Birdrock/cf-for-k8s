---
resources:
- name: cf-for-k8s-master
  type: git
  icon: github-box
  source:
    branch: master
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    ignore_paths:
      - ci/**

- name: every-10-minutes
  type: time
  icon: clock-outline
  source:
    interval: 10m

- name: pool
  type: pool
  icon: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    pool: cf-for-k8s
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))

# Extract common platform and image_resource details so task configs can be more concise
x-config: &common-task-config
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: relintdockerhubpushbot/cf-for-k8s-ci

# Extract common platform and image_resource details so task configs can be more concise
test-runner-config: &common-test-config
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: relintdockerhubpushbot/cf-test-runner

jobs:
- name: deploy-cf
  serial: true
  public: true
  plan:
  - put: pool
    params: {acquire: true}
  - get: cf-for-k8s-master
    trigger: true
  - get: every-10-minutes
    trigger: true
  - task: delete-cf
    config:
      <<: *common-task-config
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          export KUBECONFIG=kube-config.yml
          gcloud auth activate-service-account --key-file=<(echo '((ci_k8s_gcp_service_account_json))') --project='((ci_k8s_gcp_project_name))' 1>/dev/null 2>&1
          gcloud container clusters get-credentials '((ci_k8s_gke_cluster_name))' --zone '((ci_k8s_gcp_project_zone))' 1>/dev/null 2>&1

          kapp delete -a cf --yes

  - task: install-cf
    config:
      <<: *common-task-config
      inputs:
      - name: cf-for-k8s-master
      outputs:
      - name: user-password-for-smoke-tests
      params:
        DNS_DOMAIN: ((ci_k8s_domain))
        DNS_ZONE_NAME: ((ci_k8s_dns_zone_name))
        SYSTEM_DOMAIN: ((ci_k8s_domain))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          export KUBECONFIG=kube-config.yml
          gcloud auth activate-service-account --key-file=<(echo '((ci_k8s_gcp_service_account_json))') --project='((ci_k8s_gcp_project_name))' 1>/dev/null 2>&1
          gcloud container clusters get-credentials '((ci_k8s_gke_cluster_name))' --zone '((ci_k8s_gcp_project_zone))' 1>/dev/null 2>&1

          echo "Generating install values..."
          cf-for-k8s-master/hack/generate-values.sh "${SYSTEM_DOMAIN}" > cf-install-values.yml
          echo "Installing CF..."
          cf-for-k8s-master/bin/install-cf.sh cf-install-values.yml
          bosh interpolate --path /cf_admin_password cf-install-values.yml > user-password-for-smoke-tests/cf-admin-password.txt
          echo "Configuring DNS..."
          cf-for-k8s-master/hack/update-gcp-dns.sh "${DNS_DOMAIN}" "${DNS_ZONE_NAME}"

  - task: run-smoke-test
    config:
      <<: *common-test-config
      inputs:
      - name: cf-for-k8s-master
      - name: user-password-for-smoke-tests
      params:
        SMOKE_TEST_API_ENDPOINT: https://api.((ci_k8s_domain))
        SMOKE_TEST_APPS_DOMAIN: ((ci_k8s_domain))
        SMOKE_TEST_USERNAME: admin
      run:
        path: /bin/sh
        args:
        - -ec
        - |
          export SMOKE_TEST_PASSWORD=$(cat user-password-for-smoke-tests/cf-admin-password.txt)
          cd cf-for-k8s-master/tests/smoke
          ginkgo .

  - task: delete-cf
    config:
      <<: *common-task-config
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          export KUBECONFIG=kube-config.yml
          gcloud auth activate-service-account --key-file=<(echo '((ci_k8s_gcp_service_account_json))') --project='((ci_k8s_gcp_project_name))' 1>/dev/null 2>&1
          gcloud container clusters get-credentials '((ci_k8s_gke_cluster_name))' --zone '((ci_k8s_gcp_project_zone))' 1>/dev/null 2>&1

          kapp delete -a cf --yes

  - put: pool
    params: {release: pool}

- name: release-pool-manual
  public: true
  plan:
  - get: pool
  ensure:
    try:
      put: pool
      params: {release: pool}
