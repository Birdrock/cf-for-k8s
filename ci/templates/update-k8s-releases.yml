#@ load("@ytt:data", "data")

---
groups:
- name: all
  jobs:
  #@ for release in data.values.releases:
  - #@ "{}-run-unit-tests".format(release.name)
  - #@ "{}-validate-on-newest-k8s-version".format(release.name)
  - #@ "{}-validate-on-oldest-k8s-version".format(release.name)
  - #@ "{}-validate-upgrade".format(release.name)
  - #@ "{}-push-to-develop".format(release.name)
  #@ end
  #@ for release in data.values.releases:
- name: #@ release.name
  jobs:
  - #@ "{}-run-unit-tests".format(release.name)
  - #@ "{}-validate-on-newest-k8s-version".format(release.name)
  - #@ "{}-validate-on-oldest-k8s-version".format(release.name)
  - #@ "{}-validate-upgrade".format(release.name)
  - #@ "{}-push-to-develop".format(release.name)
  #@ end

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

resources:
- name: cf-for-k8s-develop
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readwrite_deploy_key.private_key))
    ignore_paths:
      - ci/**

- name: cf-for-k8s-ci
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
      - ci/**

- name: weekday-pm
  type: time
  icon: clock-outline
  source:
    days: [Monday, Tuesday, Wednesday, Thursday, Friday]
    start: 6:00 PM
    stop: 7:00 PM
    location: America/Los_Angeles

#@ for release in data.values.releases:
- name: #@ release.name
  #@ if release.github_release:
  type: github-release
  icon: github
  source:
    owner: #@ release.github_org
    repository: #@ release.name
    access_token: ((cf_deployment_release_bot_access_token))
    #@ if hasattr(release, "consume_prereleases"):
    pre_release: true
    #@ end
  #@ else:
  type: git
  icon: github
  source:
    branch: #@ release.github_branch
    uri: #@ release.github_uri
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
  #@ end
#@ end

- name: terraform
  type: terraform
  source:
    backend_type: gcs
    backend_config:
      bucket: relint-k8s-cluster-state
      credentials: ((dev_cluster_pool_gcs_admin_service_account_json))

- name: ready-pool
  type: pool
  icon: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    pool: k8s-dev/ready
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))

- name: destroy-pool
  type: pool
  icon: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    pool: k8s-dev/destroy
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))

#! Extract common platform and image_resource details so task configs can be more concise
x-config: &common-task-config
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: relintdockerhubpushbot/cf-for-k8s-ci

jobs:
#@ for release in data.values.releases:
- name: #@ "{}-run-unit-tests".format(release.name)
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
    - get: #@ release.name
    #@ if release.github_release:
      trigger: true
    #@ else:
    - get: weekday-pm
      trigger: true
    #@ end

  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
    input_mapping:
      release: #@ release.name
    params:
      BUILD_DIR: #@ release.build_dir
      GITHUB_RELEASE: #@ release.github_release
      #@ if hasattr(release, "vendir_name"):
      REPO_NAME: #@ release.vendir_name
      #@ else:
      REPO_NAME: #@ release.name
      #@ end
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      VENDIR_GITHUB_RELEASE: #@ release.vendir_github_release

  - task: run-unit-tests
    file: cf-for-k8s-ci/ci/tasks/run-unit-tests/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-bump

- name: #@ "{}-validate-on-oldest-k8s-version".format(release.name)
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
      passed:
      - #@ "{}-run-unit-tests".format(release.name)
    - get: #@ release.name
      passed:
      - #@ "{}-run-unit-tests".format(release.name)
      trigger: true

  #! TODO reduce duplication of this bump release task
  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
    input_mapping:
      release: #@ release.name
    params:
      BUILD_DIR: #@ release.build_dir
      GITHUB_RELEASE: #@ release.github_release
      #@ if hasattr(release, "vendir_name"):
      REPO_NAME: #@ release.vendir_name
      #@ else:
      REPO_NAME: #@ release.name
      #@ end
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      VENDIR_GITHUB_RELEASE: #@ release.vendir_github_release

  - task: create-tf-vars-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: relintdockerhubpushbot/cf-deployment-concourse-tasks}
      outputs:
      - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          env_suffix=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
          echo "ci-test-cluster-${env_suffix}" > tf-vars/env-name.txt
          cat <<EOT > tf-vars/input.tfvars
          project = "((ci_k8s_gcp_project_name))"
          region = "((ci_k8s_gcp_project_region))"
          zone = "((ci_k8s_gcp_project_zone))"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          machine_type = "n1-standard-8"
          EOT

  - put: terraform
    params:
      terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

  - do:
    - task: create-kind-cluster
      attempts: 5
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      file: cf-for-k8s-ci/ci/tasks/create-kind-cluster/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        VERSION_SELECTOR: oldest_version

    - task: install-cf
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    - task: run-smoke-tests
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    ensure:
      put: terraform
      params:
        terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files: [tf-vars/input.tfvars]
      get_params:
        action: destroy

- name: #@ "{}-validate-on-newest-k8s-version".format(release.name)
  public: true
  plan:
    - in_parallel:
      - get: cf-for-k8s-ci
      - get: cf-for-k8s-develop
        passed:
        - #@ "{}-run-unit-tests".format(release.name)
      - get: #@ release.name
        passed:
        - #@ "{}-run-unit-tests".format(release.name)
        trigger: true

    #! TODO reduce duplication of this bump release task
    - task: bump-release-onto-develop
      file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
      input_mapping:
        release: #@ release.name
      params:
        BUILD_DIR: #@ release.build_dir
        GITHUB_RELEASE: #@ release.github_release
        #@ if hasattr(release, "vendir_name"):
        REPO_NAME: #@ release.vendir_name
        #@ else:
        REPO_NAME: #@ release.name
        #@ end
        VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
        VENDIR_GITHUB_RELEASE: #@ release.vendir_github_release

    - task: create-tf-vars-file
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: relintdockerhubpushbot/cf-deployment-concourse-tasks}
        outputs:
        - name: tf-vars
        params:
          SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
        run:
          path: /bin/bash
          args:
          - -ec
          - |
            env_suffix=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
            echo "ci-test-cluster-${env_suffix}" > tf-vars/env-name.txt
            cat <<EOT > tf-vars/input.tfvars
            project = "((ci_k8s_gcp_project_name))"
            region = "((ci_k8s_gcp_project_region))"
            zone = "((ci_k8s_gcp_project_zone))"
            service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
            machine_type = "n1-standard-8"
            EOT

    - put: terraform
      params:
        terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        delete_on_failure: true
        var_files: [tf-vars/input.tfvars]

    - do:
      - task: create-kind-cluster
        attempts: 5
        input_mapping:
          cf-for-k8s: cf-for-k8s-develop
        file: cf-for-k8s-ci/ci/tasks/create-kind-cluster/task.yml
        params:
          GCP_KEY: ((ci_k8s_gcp_service_account_json))
          GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
          VERSION_SELECTOR: newest_version

      - task: install-cf
        input_mapping:
          cf-for-k8s: cf-for-k8s-bump
        file: cf-for-k8s-ci/ci/tasks/install-cf-on-kind/task.yml
        params:
          GCP_KEY: ((ci_k8s_gcp_service_account_json))
          GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

      - task: run-smoke-tests
        input_mapping:
          cf-for-k8s: cf-for-k8s-bump
        file: cf-for-k8s-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
        params:
          GCP_KEY: ((ci_k8s_gcp_service_account_json))
          GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

      ensure:
        put: terraform
        params:
          terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
          env_name_file: tf-vars/env-name.txt
          action: destroy
          var_files: [tf-vars/input.tfvars]
        get_params:
          action: destroy

- name: #@ "{}-validate-upgrade".format(release.name)
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
      passed:
      - #@ "{}-run-unit-tests".format(release.name)
    - get: #@ release.name
      passed:
      - #@ "{}-run-unit-tests".format(release.name)
      trigger: true
    - put: pool-lock
      resource: ready-pool
      params: {acquire: true}

  #! TODO reduce duplication of this bump release task
  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
    input_mapping:
      release: #@ release.name
    params:
      BUILD_DIR: #@ release.build_dir
      GITHUB_RELEASE: #@ release.github_release
      #@ if hasattr(release, "vendir_name"):
      REPO_NAME: #@ release.vendir_name
      #@ else:
      REPO_NAME: #@ release.name
      #@ end
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      VENDIR_GITHUB_RELEASE: #@ release.vendir_github_release

  - task: first-install-cf-develop
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop
      pool-lock: pool-lock
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))

  - task: push-test-app
    file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop
    params:
      APP_NAME: my-node-app

  - task: upgrade-cf-with-component-bump
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-bump
      pool-lock: pool-lock
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      UPGRADE: true

  - in_parallel:
    - task: run-smoke-tests
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
    - task: verify-existing-app
      file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      params:
        APP_NAME: my-node-app
        VERIFY_EXISTING_APP: true

  - task: delete-cf
    file: cf-for-k8s-ci/ci/tasks/delete-cf/task.yml
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
    input_mapping:
      pool-lock: pool-lock

  on_success:
    do:
    - put: destroy-pool
      params:
        add: pool-lock

    - put: ready-pool
      params:
        remove: pool-lock

- name: #@ "{}-push-to-develop".format(release.name)
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
      passed:
      - #@ "{}-validate-on-oldest-k8s-version".format(release.name)
      - #@ "{}-validate-on-newest-k8s-version".format(release.name)
      - #@ "{}-validate-upgrade".format(release.name)
    - get: #@ release.name
      passed:
      - #@ "{}-validate-on-oldest-k8s-version".format(release.name)
      - #@ "{}-validate-on-newest-k8s-version".format(release.name)
      - #@ "{}-validate-upgrade".format(release.name)
      trigger: true

  #! TODO reduce duplication of this bump release task
  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
    input_mapping:
      release: #@ release.name
    params:
      BUILD_DIR: #@ release.build_dir
      GITHUB_RELEASE: #@ release.github_release
      #@ if hasattr(release, "vendir_name"):
      REPO_NAME: #@ release.vendir_name
      #@ else:
      REPO_NAME: #@ release.name
      #@ end
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      VENDIR_GITHUB_RELEASE: #@ release.vendir_github_release

  - put: cf-for-k8s-develop
    params:
      repository: cf-for-k8s-bump
      rebase: true
#@ end
