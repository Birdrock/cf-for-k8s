apiVersion: v1
kind: ServiceAccount
metadata:
  name: cf-blobstore-minio-update-prometheus-secret
  labels:
    app: minio-update-prometheus-secret
    chart: minio-5.0.30
    release: cf-blobstore
    heritage: Helm
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cf-blobstore-minio
  namespace: cf-blobstore
---
apiVersion: v1
kind: Secret
metadata:
  name: cf-blobstore-minio
  labels:
    app: minio
    chart: minio-5.0.30
    release: cf-blobstore
    heritage: Helm
type: Opaque
data:
  accesskey: null
  secretkey: null
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cf-blobstore-minio
  labels:
    app: minio
    chart: minio-5.0.30
    release: cf-blobstore
    heritage: Helm
data:
  initialize: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --config-dir ${MC_CONFIG_DIR}"

    # connectToMinio
    # Use a check-sleep-check loop to wait for Minio service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to Minio server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} config host add myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }

    # checkBucketExists ($bucket)
    # Check if the bucket exists, by using the exit code of `mc ls`
    checkBucketExists() {
      BUCKET=$1
      CMD=$(${MC} ls myminio/$BUCKET > /dev/null 2>&1)
      return $?
    }

    # createBucket ($bucket, $policy, $purge)
    # Ensure bucket exists, purging if asked to
    createBucket() {
      BUCKET=$1
      POLICY=$2
      PURGE=$3

      # Purge the bucket, if set & exists
      # Since PURGE is user input, check explicitly for `true`
      if [ $PURGE = true ]; then
        if checkBucketExists $BUCKET ; then
          echo "Purging bucket '$BUCKET'."
          set +e ; # don't exit if this fails
          ${MC} rm -r --force myminio/$BUCKET
          set -e ; # reset `e` as active
        else
          echo "Bucket '$BUCKET' does not exist, skipping purge."
        fi
      fi

      # Create the bucket if it does not exist
      if ! checkBucketExists $BUCKET ; then
        echo "Creating bucket '$BUCKET'"
        ${MC} mb myminio/$BUCKET
      else
        echo "Bucket '$BUCKET' already exists."
      fi

      # At this point, the bucket should exist, skip checking for existence
      # Set policy on the bucket
      echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
      ${MC} policy set $POLICY myminio/$BUCKET
    }

    # Try connecting to Minio instance
    scheme=http
    connectToMinio $scheme
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cf-blobstore-minio
  labels:
    app: minio
    chart: minio-5.0.30
    release: cf-blobstore
    heritage: Helm
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 500Gi
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cf-blobstore-minio-update-prometheus-secret
  labels:
    app: minio-update-prometheus-secret
    chart: minio-5.0.30
    release: cf-blobstore
    heritage: Helm
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
  - update
  - patch
  resourceNames:
  - cf-blobstore-minio-prometheus
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
- apiGroups:
  - monitoring.coreos.com
  resources:
  - servicemonitors
  verbs:
  - get
  resourceNames:
  - cf-blobstore-minio
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cf-blobstore-minio-update-prometheus-secret
  labels:
    app: minio-update-prometheus-secret
    chart: minio-5.0.30
    release: cf-blobstore
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cf-blobstore-minio-update-prometheus-secret
subjects:
- kind: ServiceAccount
  name: cf-blobstore-minio-update-prometheus-secret
  namespace: cf-blobstore
---
apiVersion: v1
kind: Service
metadata:
  name: cf-blobstore-minio
  labels:
    app: minio
    chart: minio-5.0.30
    release: cf-blobstore
    heritage: Helm
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 9000
    protocol: TCP
    targetPort: 9000
  selector:
    app: minio
    release: cf-blobstore
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cf-blobstore-minio
  labels:
    app: minio
    chart: minio-5.0.30
    release: cf-blobstore
    heritage: Helm
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 1
  selector:
    matchLabels:
      app: minio
      release: cf-blobstore
  template:
    metadata:
      name: cf-blobstore-minio
      labels:
        app: minio
        release: cf-blobstore
      annotations:
        checksum/secrets: debfe7f1d286d311ff318bdae05da710f2c6b260e296564745e6e261a630dccb
        checksum/config: 6f2dbe8a0c3f59cb8d9e7051cd9370791c2df5ec3cbe0bad179295559a282d2f
    spec:
      serviceAccountName: cf-blobstore-minio
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: minio
        image: minio/minio:RELEASE.2020-06-14T18-32-17Z
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        - -ce
        - /usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server /export
        volumeMounts:
        - name: export
          mountPath: /export
        ports:
        - name: http
          containerPort: 9000
        env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: cf-blobstore-minio
              key: accesskey
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: cf-blobstore-minio
              key: secretkey
        - name: MINIO_API_READY_DEADLINE
          value: 5s
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 1
        readinessProbe:
          httpGet:
            path: /minio/health/ready
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 6
          successThreshold: 1
          failureThreshold: 3
        resources:
          requests:
            memory: 4Gi
      volumes:
      - name: export
        persistentVolumeClaim:
          claimName: cf-blobstore-minio
      - name: minio-user
        secret:
          secretName: cf-blobstore-minio
